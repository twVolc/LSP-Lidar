import tkinter as tk
import tkinter.ttk as ttk
from tkinter import filedialog
from tkinter import messagebox
import tkinter.font as tkFont

import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg

from threading import Thread
import queue
import sys

import numpy as np

from GUI_subs import *
from post_process import process_data, ProcessInfo, remove_empty_scans, DataProcessor
from LSP_control import ProcessLSP
from data_handler import handle_data


class MainGUI(ttk.Frame):
    """Main GUI to help in acquisition and running of LSP/lidar instrument"""
    def __init__(self, parent):
        """Initialise class"""
        ttk.Frame.__init__(self, parent)

        self.parent = parent
        self.parent.title('LSP-Lidar Control')
        self.parent.protocol('WM_DELETE_WINDOW', self.exit_app)

        self.initdir = 'C:\\Users\\tw9616\\Documents\\PhD\\EE Placement\\Therm_Lidar Python\\'

        self.setts = SettingsGUI()      # Holds GUI settings
        self.info = ProcessInfo()       # Holds information needed for processing
        self.lsp_proc = ProcessLSP()    # Has some useful processing algorithms for LSP data
        self._q = queue.Queue()         # Queue to retrieve data from thread
        self.processor = DataProcessor(self._q)  # Data processing class (not currently used)
        # ----------------------------------------------------------------
        # Tab setup
        self.tabs = ttk.Notebook(self.parent)
        self.acqFrame = ttk.Frame(self.tabs)
        self.analysisFrame = ttk.Frame(self.tabs)
        self.frame3D = ttk.Frame(self.tabs)
        self.tabs.add(self.acqFrame, text='Acquisition')
        self.tabs.add(self.analysisFrame, text='Analysis')
        self.tabs.add(self.frame3D, text='3D Analysis')
        self.tabs.pack(fill="both", expand=1)

        # Setup frames
        self.__acq_setup__(self.acqFrame)
        self.__analysis_setup__(self.analysisFrame)
        self.__3D_setup__(self.frame3D)
        # -----------------------------------------------------------------

        self.processor.mess_inst = self.messages

    def exit_app(self):
        """Exit app options"""
        if messagebox.askokcancel("Quit", "Are you sure you want to quit?"):
            # Killing all threads and then exiting the GUI
            self.parent.destroy()
            sys.exit()

    def __acq_setup__(self, frame):
        """Setup acquisition frame"""
        self.acquiring = False      # Used to determine whether we are currently in a state of acquisition or not

        self.acq_butt = ttk.Button(frame, text='START ACQUISTION', command=self.handle_acquisition)
        self.acq_butt.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        self.messages = MessagesGUI(frame)
        self.messages.frame.pack(side=tk.RIGHT, fill=tk.BOTH)

        self.lsp_config = LSPConfigGUI(frame, self.messages)
        self.lsp_config.frame.pack(side=tk.TOP)



    def __analysis_setup__(self, frame):
        """Setup analysis frame"""

        # Setup file choice and associated button
        file_frame = tk.Frame(frame)
        file_frame.grid(row=0, column=0, padx=2, pady=2, sticky='nsw')

        self.file_loader = FileSelector(file_frame, type=FileSelector.LOAD, title='Process file:',
                                        initdir=self.initdir)
        self.file_loader.filetypes = [('MAT file', '*.mat'), ('All files', '*.*')]
        self.file_loader.frame.pack()

        # Process button
        process_butt = tk.Button(file_frame, text='RUN', bg='limegreen',
                                 font=self.setts.mainFontBold, command=self.process_data_thread)
        # process_butt.grid(row=1, column=2, pady=2)
        process_butt.pack()

        self.file_saver = FileSelector(file_frame, type=FileSelector.SAVE, title='Save file:',
                                       initdir=self.initdir)
        self.file_saver.filetypes = [('HDF5', '*.h5'), ('All files', '*.*')]
        self.file_saver.frame.pack()

        save_butt = tk.Button(file_frame, text='SAVE', command=self.save_data,
                              bg='orange', font=self.setts.mainFontBold)
        save_butt.pack()
        # --------------------------------------------------------------------
        # Settings setup
        # --------------------------------------------------------------------
        set_frame = tk.LabelFrame(frame, text='Settings', relief=tk.GROOVE, borderwidth=2)
        set_frame.grid(row=0, column=1, sticky='w', padx=2, pady=2)

        self.lid_offset_var = tk.StringVar()
        self.lid_offset_var.set(str(self.info.LIDAR_ANGLE_OFFSET))
        offset_lab = ttk.Label(set_frame, text='Lidar Angle Offset:')
        offset_lab.grid(row=0, column=0, pady=2, sticky='e')
        offset_box = tk.Spinbox(set_frame, textvariable=self.lid_offset_var, from_=-40, to=40, increment=1, width=3)
        offset_box.grid(row=0, column=1, sticky='e', pady=2, padx=2)

        self.LSP_FOV = tk.StringVar()
        self.LSP_FOV.set(self.info._range_lsp_angle)
        FOV_lab = ttk.Label(set_frame, text='LSP FOV:')
        FOV_lab.grid(row=1, column=0, pady=2, sticky='e')
        FOV_box = tk.Spinbox(set_frame, textvariable=self.LSP_FOV, from_=10, to=100, increment=1, width=3)
        FOV_box.grid(row=1, column=1, sticky='e', pady=2, padx=2)

        self.lidar_interp_options = ['cubic', 'linear', 'nearest']
        self.lidar_interp_var = tk.StringVar()
        interp_lab = ttk.Label(set_frame, text='Lidar Interpolation:')
        interp_lab.grid(row=2, column=0, pady=2, sticky='e')
        interp_box = ttk.OptionMenu(set_frame, self.lidar_interp_var,
                                    self.lidar_interp_options[0], *self.lidar_interp_options)
        interp_box.grid(row=2, column=1, pady=2, sticky='e')

        self.dir_var = tk.StringVar()
        self.dir_var.set(self.setts.lsp_first[0])
        dir_lab = ttk.Label(set_frame, text='Instrument Orientation:')
        dir_lab.grid(row=3, column=0, pady=2, sticky='e')
        dir_ent = ttk.OptionMenu(set_frame, self.dir_var, self.setts.lsp_first[0],
                                 self.setts.lsp_first[0], self.setts.lid_first[0])
        dir_ent.grid(row=3, column=1, pady=2, sticky='e')
        # --------------------------------------------------------------------
        # Plot setup
        # --------------------------------------------------------------------
        plot_frame = tk.Frame(frame)
        plot_frame.grid(row=2, column=0, columnspan=4)
        # Lidar distance plot
        self.lid_plt = PlottingGUI(plot_frame, 'Distance [mm]')
        self.lid_plt.frame.pack(side=tk.LEFT)

        # Lidar distance plot (interpolated)
        self.lid_interp_plt = PlottingGUI(plot_frame, 'Distance [mm]')
        self.lid_interp_plt.frame.pack(side=tk.LEFT)

        # LSP temperature plot
        self.temp_plt = PlottingGUI(plot_frame, r'Temperature [$^o$C]')
        self.temp_plt.frame.pack(side=tk.LEFT)

        # # 3D plot
        # self.plt_3d = Plot3DGUI(plot_frame)
        # self.plt_3d.frame.pack(side=tk.BOTTOM)
        # --------------------------------------------------------------------

    def __3D_setup__(self, frame):
        """Setup 3D analysis frame"""
        self.save_3d = FileSelector(frame, type=FileSelector.SAVE, initdir=self.initdir, title='Save .xyz file:')
        self.save_3d.frame.pack(side=tk.TOP)

        analysis_frame = tk.Frame(frame, relief=tk.GROOVE, borderwidth=2)
        analysis_frame.pack(side=tk.TOP)

        gen_xyz_butt = tk.Button(analysis_frame, text='Generate XYZ', command=self.gen_xyz,
                                 bg='deep sky blue', font=self.setts.mainFontBold)
        gen_xyz_butt.grid(row=2, column=0, columnspan=2, sticky='ew')

        lab = tk.Label(analysis_frame, text='Resize X: ', font=self.setts.mainFont)
        lab.grid(row=0, column=0, sticky='e')
        lab = tk.Label(analysis_frame, text='Resize Y: ', font=self.setts.mainFont)
        lab.grid(row=1, column=0, sticky='e')

        self.resize_x = tk.StringVar()
        self.resize_x.set('1000')
        self.resize_y = tk.StringVar()
        self.resize_y.set('1000')

        self.resize_x_box = tk.Spinbox(analysis_frame, textvariable=self.resize_x, font=self.setts.mainFont)
        self.resize_x_box.configure(from_=1, to=1000, increment=1, width=4)
        self.resize_y_box = tk.Spinbox(analysis_frame, textvariable=self.resize_y, font=self.setts.mainFont)
        self.resize_y_box.configure(from_=1, to=1000, increment=1, width=4)
        self.resize_x_box.grid(row=0, column=1)
        self.resize_y_box.grid(row=1, column=1)

        # 3D plot
        self.plt_3d = Plot3DGUI(frame)
        self.plt_3d.frame.pack(side=tk.TOP)

    def handle_acquisition(self):
        """Starts LSP/lidar acquisition sequence"""
        if not self.acquiring:
            self.data_q = queue.Queue()
            self.acquiring = True

            self.data_thread = Thread(target=handle_data, args=(self.data_q, self.messages, ))
            self.data_thread.daemon = True
            self.data_thread.start()

            self.acq_butt.configure(text="Stop Acquisition")

        else:
            self.acquiring = False
            self.data_q.put(-1)     # Tell data_handler() to close down

            self.acq_butt.configure(text="Start Acquisition")

    def process_data_thread(self):
        """Start thread for processing data"""
        self.data_dict = self.__prep_data__()
        if self.data_dict is None:
            return

        instr_dir = self.dir_var.get()
        if instr_dir == self.setts.lid_first[0]:
            self.info.INSTRUMENT_DIRECTION = self.setts.lid_first[1]
        elif instr_dir == self.setts.lsp_first[0]:
            self.info.INSTRUMENT_DIRECTION = self.setts.lsp_first[1]
        else:
            self.messages.message('Error!!! Unknown instrument direction definition: %s' % instr_dir)
            return

        self.info.LIDAR_ANGLE_OFFSET = int(self.lid_offset_var.get())   # Update lidar offset angle
        self.info._range_lsp_angle = int(self.LSP_FOV.get())            # Update lidar FOV
        self.info.INTERP_METHOD = self.lidar_interp_var.get()           # Update lidar interpolation method

        # Perform main processing
        # t = Thread(target=process_data, args=(self.data_dict['lidar'], self.data_dict['array'],
        #                                       self.data_dict['speed'], self._q,))
        # t.Daemon = True
        # t.start()
        self.processor.data_array, self.processor.raw_lid = process_data(self.data_dict['lidar'],
                                                                         self.data_dict['array'],
                                                                         self.data_dict['speed'], info=self.info)
        self.update_plots()

    def __prep_data__(self):
        """Initialising things for processing of data"""
        array_main = np.zeros([self.info.NUM_SCANS, self.info.len_lsp, self.info.NUM_Z_DIM])
        if self.file_loader.filename is None:
            self.messages.message('Error!!! No file selected, cannot process data.')
            return None
        dat = self.lsp_proc.read_array(self.file_loader.filename)['arr']
        full_dat = remove_empty_scans(dat)

        # Extract data then pack into dictionary to be returned
        scan_speeds = full_dat[:, self.info.speed_idx]
        array_main[:, :, self.info.TEMP_IDX] = full_dat[:, 0:self.info.len_lsp]
        lidar = full_dat[:, self.info.lid_idx_start:]
        scan_num = np.arange(0, full_dat.shape[0])

        # Compile data into dictionary
        data_dict = {'array': array_main, 'speed': scan_speeds, 'lidar': lidar, 'Num_scans': scan_num}
        return data_dict

    def update_plots(self):
        """Updates plots with new data"""
        self.lid_plt.update_cmap(self.processor.raw_lid)
        self.lid_interp_plt.update_cmap(self.processor.data_array[:, :, self.info.DIST_IDX])
        self.temp_plt.update_cmap(self.processor.data_array[:, :, self.info.TEMP_IDX])

    def gen_xyz(self):
        """Instigate generation of xyz data"""
        # Update resizing dimensions
        self.processor.resize_dims[0] = int(self.resize_x.get())
        self.processor.resize_dims[1] = int(self.resize_y.get())

        self.processor.create_xyz_basic()
        if self.save_3d.filename is None:
            self.messages.message('No file selected for save - data not saved!')
        else:
            self.processor.save_ASCII(self.save_3d.filename)
            self.processor.generate_LAS(self.save_3d.filename)

        self.plot_3D()

    def plot_3D(self):
        """Plots 3D dataset if it has been created"""
        if self.processor.flat_array is not None:
            cut_s = 0
            cut_e = 1000000
            step = 1
            x = self.processor.get_x()
            y = self.processor.get_y()
            z = self.processor.get_z()
            temp = self.processor.get_temp()
            z[z>2000] = 2000

            self.plt_3d.update_plot(x[::step], y[::step], z[::step], temp[::step])
            self.messages.message('3D plot drawn!!!')

        else:
            self.messages.message('No data available for 3D plot. Please first generate XYZ dataset')


    def save_data(self):
        """Instigate saving of data"""
        self.processor.save_hdf5(self.file_saver.filename)
        self.processor.generate_LAS(self.file_saver.filename)


if __name__ == "__main__":
    root = tk.Tk()
    root.geometry('{0}x{1}+0+0'.format(root.winfo_screenwidth(), root.winfo_screenheight()))
    gui = MainGUI(root)
    root.mainloop()
